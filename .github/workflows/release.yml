name: Release

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  id-token: write
  packages: write
  contents: write

jobs:

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Run Tests
        run: |
          make test

  build:
    name: Build
    needs: [ test ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ['linux', 'windows', 'darwin']
        architecture: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Build the artifacts
        run: |
          make OS=${{ matrix.os }} GO_ARCH=${{ matrix.architecture }} build

      - name: upload built artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: openbao-plugin-secrets-nats-${{ matrix.os }}-${{ matrix.architecture }}
          path: build/openbao/plugins/openbao-plugin-secrets-nats-*
          retention-days: 1
          overwrite: true

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ build ]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 'lts/*'
      
      - name: Download built artifacts
        uses: actions/download-artifact@v5
        with:
          path: build/openbao/plugins/
          merge-multiple: true

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USER: ${{ github.actor }}
        shell: bash
        run: |-
          set -e
          npm install @semantic-release/exec @eclass/semantic-release-docker @semantic-release/git -D
          npx -c semantic-release
